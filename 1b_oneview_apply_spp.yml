---
- name: Add firmware to Server Profiles in OneView
  hosts: uc3_targets
  gather_facts: false

  vars:
    firmware: true

  tasks:
  - name: Enter VSAN-Compliant Maintenance Mode for the defined host {{ ansible_host }}
    community.vmware.vmware_maintenancemode:
      hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
      username: "{{ lookup('env', 'VMWARE_USER') }}"
      password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
      validate_certs: false
      esxi_hostname: "{{ ansible_host }}"
      vsan: ensureObjectAccessibility
      evacuate: true
      timeout: 3600
      state: present
    delegate_to: localhost

  - name: ESXi switch off
    community.vmware.vmware_host_powerstate:
      hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
      username: "{{ lookup('env', 'VMWARE_USER') }}"
      password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
      validate_certs: false
      esxi_hostname: "{{ ansible_host }}"
      timeout: 3600
      state: shutdown-host
    delegate_to: localhost
    register: esxiswitchoff
    ignore_errors: true

  - name: Debug
    debug: 
      var: esxiswitchoff
    when: debug | default(false) | bool

  - name: only ignore error when already swithed off
    fail:
      msg: "{{ esxiswitchoff.msg }}"
    when: 
      - esxiswitchoff.failed
      - "'system is not responding' not in esxiswitchoff.msg"
  
  #  - name: Switch Server off
  #    hpe.oneview.oneview_server_hardware:
  #      hostname: "{{ oneview_host }}"
  #      username: "{{ oneview_username }}"
  #      password: "{{ oneview_password }}"
  #      auth_login_domain: "{{ oneview_domain }}"
  #      api_version: "{{ oneview_apiversion }}"
  #  
  #      state: power_state_set
  #      data:
  #        name : "{{ inventory_hostname }}.hpintelco.org"
  #        powerStateData:
  #          powerState: "Off"
  #          powerControl: "MomentaryPress"
  #    delegate_to: localhost
  #    ignore_errors: true
          
  - name: Wait till final power state OFF is reached
    hpe.oneview.oneview_server_hardware_facts:
      hostname: "{{ oneview_host }}"
      username: "{{ oneview_username }}"
      password: "{{ oneview_password }}"
      auth_login_domain: "{{ oneview_domain }}"
      api_version: "{{ oneview_apiversion }}"
      name: "{{ inventory_hostname }}.hpintelco.org"
    delegate_to: localhost
    delay: 10
    retries: 30
    until: 
      - server_hardwares.powerState is defined 
      - server_hardwares.powerState == "Off"
  
  - name: debug server profile
    ansible.builtin.debug:
      msg: "{{ lookup('ansible.builtin.template', 'server_profile_template.j2') | from_yaml }}"
    when: debug | default('false') | bool
  
  - name: Create a server profile
    delegate_to: localhost
    register: result
    hpe.oneview.oneview_server_profile:
      hostname: "{{ hostvars.oneview_host.ansible_host }}"
      username: "{{ oneview_username }}"
      password: "{{ oneview_password }}"
      api_version: "{{ oneview_apiversion }}"
      state: present
      data:
        "{{ lookup('ansible.builtin.template', 'server_profile_template.j2') | from_yaml }}"
      params:
        force: true
  
  - name: Switch Server on
    hpe.oneview.oneview_server_hardware:
      hostname: "{{ oneview_host }}"
      username: "{{ oneview_username }}"
      password: "{{ oneview_password }}"
      auth_login_domain: "{{ oneview_domain }}"
      api_version: "{{ oneview_apiversion }}"
  
      state: power_state_set
      data:
        name : "{{ inventory_hostname }}.hpintelco.org"
        powerStateData:
          powerState: "On"
          powerControl: "MomentaryPress"
    delegate_to: localhost
    ignore_errors: true
        
  - name: Wait till final power state On is reached
    hpe.oneview.oneview_server_hardware_facts:
      hostname: "{{ oneview_host }}"
      username: "{{ oneview_username }}"
      password: "{{ oneview_password }}"
      auth_login_domain: "{{ oneview_domain }}"
      api_version: "{{ oneview_apiversion }}"
      name: "{{ inventory_hostname }}.hpintelco.org"
    delegate_to: localhost
    delay: 10
    retries: 30
    until: 
      - server_hardwares.powerState is defined 
      - server_hardwares.powerState == "On"
  
  - name: Wait for ESXi to be ready
    ansible.builtin.wait_for:
      port: "{{ inner_item }}"
      host: "{{ inventory_hostname }}"
      # all values in seconds
      delay: 5            # wait 5 sec before 1st try
      connect_timeout: 10   # wait 10 sec with each try
      sleep: 20             # wait 20 sec before trying agin
      timeout: 1500         # wait 30 min alltogether before failing
      msg: "ESXi {{ inventory_hostname }} not ready yet"
    delegate_to: localhost
    loop:
      - '902'
      - '80'
      - '443'
    loop_control:
      loop_var: inner_item
    # see: https://kb.vmware.com/s/article/2039095 for needed ports
  
  - name: ESXi exit maintenance
    community.vmware.vmware_maintenancemode:
      hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
      username: "{{ lookup('env', 'VMWARE_USER') }}"
      password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
      validate_certs: false
      esxi_hostname: "{{ inventory_hostname }}"
      vsan: ensureObjectAccessibility
      evacuate: true
      timeout: 3600
      state: absent
    delegate_to: localhost

#  - name: debug message to reboot the server
#    ansible.builtin.debug:
#      msg: "Please run update_esxi or reboot the server manually to apply all firmware updates"
